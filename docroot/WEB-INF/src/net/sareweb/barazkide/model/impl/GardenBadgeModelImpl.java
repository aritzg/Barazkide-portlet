/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.barazkide.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.barazkide.model.GardenBadge;
import net.sareweb.barazkide.model.GardenBadgeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the GardenBadge service. Represents a row in the &quot;Barazkide_GardenBadge&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.barazkide.model.GardenBadgeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link GardenBadgeImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see GardenBadgeImpl
 * @see net.sareweb.barazkide.model.GardenBadge
 * @see net.sareweb.barazkide.model.GardenBadgeModel
 * @generated
 */
public class GardenBadgeModelImpl extends BaseModelImpl<GardenBadge>
	implements GardenBadgeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a garden badge model instance should use the {@link net.sareweb.barazkide.model.GardenBadge} interface instead.
	 */
	public static final String TABLE_NAME = "Barazkide_GardenBadge";
	public static final Object[][] TABLE_COLUMNS = {
			{ "gardenBadgeId", Types.BIGINT },
			{ "gardenId", Types.BIGINT },
			{ "badgeId", Types.BIGINT },
			{ "obtainedDate", Types.TIMESTAMP }
		};
	public static final String TABLE_SQL_CREATE = "create table Barazkide_GardenBadge (gardenBadgeId LONG not null primary key,gardenId LONG,badgeId LONG,obtainedDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table Barazkide_GardenBadge";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.barazkide.model.GardenBadge"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.barazkide.model.GardenBadge"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.barazkide.model.GardenBadge"));

	public GardenBadgeModelImpl() {
	}

	public long getPrimaryKey() {
		return _gardenBadgeId;
	}

	public void setPrimaryKey(long primaryKey) {
		setGardenBadgeId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_gardenBadgeId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return GardenBadge.class;
	}

	public String getModelClassName() {
		return GardenBadge.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("gardenBadgeId", getGardenBadgeId());
		attributes.put("gardenId", getGardenId());
		attributes.put("badgeId", getBadgeId());
		attributes.put("obtainedDate", getObtainedDate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long gardenBadgeId = (Long)attributes.get("gardenBadgeId");

		if (gardenBadgeId != null) {
			setGardenBadgeId(gardenBadgeId);
		}

		Long gardenId = (Long)attributes.get("gardenId");

		if (gardenId != null) {
			setGardenId(gardenId);
		}

		Long badgeId = (Long)attributes.get("badgeId");

		if (badgeId != null) {
			setBadgeId(badgeId);
		}

		Date obtainedDate = (Date)attributes.get("obtainedDate");

		if (obtainedDate != null) {
			setObtainedDate(obtainedDate);
		}
	}

	public long getGardenBadgeId() {
		return _gardenBadgeId;
	}

	public void setGardenBadgeId(long gardenBadgeId) {
		_gardenBadgeId = gardenBadgeId;
	}

	public long getGardenId() {
		return _gardenId;
	}

	public void setGardenId(long gardenId) {
		_gardenId = gardenId;
	}

	public long getBadgeId() {
		return _badgeId;
	}

	public void setBadgeId(long badgeId) {
		_badgeId = badgeId;
	}

	public Date getObtainedDate() {
		return _obtainedDate;
	}

	public void setObtainedDate(Date obtainedDate) {
		_obtainedDate = obtainedDate;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			GardenBadge.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public GardenBadge toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (GardenBadge)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		GardenBadgeImpl gardenBadgeImpl = new GardenBadgeImpl();

		gardenBadgeImpl.setGardenBadgeId(getGardenBadgeId());
		gardenBadgeImpl.setGardenId(getGardenId());
		gardenBadgeImpl.setBadgeId(getBadgeId());
		gardenBadgeImpl.setObtainedDate(getObtainedDate());

		gardenBadgeImpl.resetOriginalValues();

		return gardenBadgeImpl;
	}

	public int compareTo(GardenBadge gardenBadge) {
		long primaryKey = gardenBadge.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		GardenBadge gardenBadge = null;

		try {
			gardenBadge = (GardenBadge)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = gardenBadge.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<GardenBadge> toCacheModel() {
		GardenBadgeCacheModel gardenBadgeCacheModel = new GardenBadgeCacheModel();

		gardenBadgeCacheModel.gardenBadgeId = getGardenBadgeId();

		gardenBadgeCacheModel.gardenId = getGardenId();

		gardenBadgeCacheModel.badgeId = getBadgeId();

		Date obtainedDate = getObtainedDate();

		if (obtainedDate != null) {
			gardenBadgeCacheModel.obtainedDate = obtainedDate.getTime();
		}
		else {
			gardenBadgeCacheModel.obtainedDate = Long.MIN_VALUE;
		}

		return gardenBadgeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{gardenBadgeId=");
		sb.append(getGardenBadgeId());
		sb.append(", gardenId=");
		sb.append(getGardenId());
		sb.append(", badgeId=");
		sb.append(getBadgeId());
		sb.append(", obtainedDate=");
		sb.append(getObtainedDate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.barazkide.model.GardenBadge");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>gardenBadgeId</column-name><column-value><![CDATA[");
		sb.append(getGardenBadgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gardenId</column-name><column-value><![CDATA[");
		sb.append(getGardenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>badgeId</column-name><column-value><![CDATA[");
		sb.append(getBadgeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>obtainedDate</column-name><column-value><![CDATA[");
		sb.append(getObtainedDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = GardenBadge.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			GardenBadge.class
		};
	private long _gardenBadgeId;
	private long _gardenId;
	private long _badgeId;
	private Date _obtainedDate;
	private GardenBadge _escapedModelProxy;
}