/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.barazkide.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.barazkide.model.Membership;
import net.sareweb.barazkide.model.MembershipModel;
import net.sareweb.barazkide.model.MembershipSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Membership service. Represents a row in the &quot;Barazkide_Membership&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.barazkide.model.MembershipModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link MembershipImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see MembershipImpl
 * @see net.sareweb.barazkide.model.Membership
 * @see net.sareweb.barazkide.model.MembershipModel
 * @generated
 */
@JSON(strict = true)
public class MembershipModelImpl extends BaseModelImpl<Membership>
	implements MembershipModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a membership model instance should use the {@link net.sareweb.barazkide.model.Membership} interface instead.
	 */
	public static final String TABLE_NAME = "Barazkide_Membership";
	public static final Object[][] TABLE_COLUMNS = {
			{ "membershipId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "gardenId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table Barazkide_Membership (membershipId LONG not null primary key,userId LONG,gardenId LONG)";
	public static final String TABLE_SQL_DROP = "drop table Barazkide_Membership";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.barazkide.model.Membership"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.barazkide.model.Membership"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Membership toModel(MembershipSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Membership model = new MembershipImpl();

		model.setMembershipId(soapModel.getMembershipId());
		model.setUserId(soapModel.getUserId());
		model.setGardenId(soapModel.getGardenId());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Membership> toModels(MembershipSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Membership> models = new ArrayList<Membership>(soapModels.length);

		for (MembershipSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.barazkide.model.Membership"));

	public MembershipModelImpl() {
	}

	public long getPrimaryKey() {
		return _membershipId;
	}

	public void setPrimaryKey(long primaryKey) {
		setMembershipId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_membershipId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Membership.class;
	}

	public String getModelClassName() {
		return Membership.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("membershipId", getMembershipId());
		attributes.put("userId", getUserId());
		attributes.put("gardenId", getGardenId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long membershipId = (Long)attributes.get("membershipId");

		if (membershipId != null) {
			setMembershipId(membershipId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long gardenId = (Long)attributes.get("gardenId");

		if (gardenId != null) {
			setGardenId(gardenId);
		}
	}

	@JSON
	public long getMembershipId() {
		return _membershipId;
	}

	public void setMembershipId(long membershipId) {
		_membershipId = membershipId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public long getGardenId() {
		return _gardenId;
	}

	public void setGardenId(long gardenId) {
		_gardenId = gardenId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Membership.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Membership toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Membership)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		MembershipImpl membershipImpl = new MembershipImpl();

		membershipImpl.setMembershipId(getMembershipId());
		membershipImpl.setUserId(getUserId());
		membershipImpl.setGardenId(getGardenId());

		membershipImpl.resetOriginalValues();

		return membershipImpl;
	}

	public int compareTo(Membership membership) {
		long primaryKey = membership.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Membership membership = null;

		try {
			membership = (Membership)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = membership.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Membership> toCacheModel() {
		MembershipCacheModel membershipCacheModel = new MembershipCacheModel();

		membershipCacheModel.membershipId = getMembershipId();

		membershipCacheModel.userId = getUserId();

		membershipCacheModel.gardenId = getGardenId();

		return membershipCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{membershipId=");
		sb.append(getMembershipId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", gardenId=");
		sb.append(getGardenId());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.barazkide.model.Membership");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>membershipId</column-name><column-value><![CDATA[");
		sb.append(getMembershipId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>gardenId</column-name><column-value><![CDATA[");
		sb.append(getGardenId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Membership.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Membership.class
		};
	private long _membershipId;
	private long _userId;
	private String _userUuid;
	private long _gardenId;
	private Membership _escapedModelProxy;
}