/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package net.sareweb.barazkide.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import net.sareweb.barazkide.model.Rating;
import net.sareweb.barazkide.model.RatingModel;
import net.sareweb.barazkide.model.RatingSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Rating service. Represents a row in the &quot;Barazkide_Rating&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link net.sareweb.barazkide.model.RatingModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link RatingImpl}.
 * </p>
 *
 * @author A.Galdos
 * @see RatingImpl
 * @see net.sareweb.barazkide.model.Rating
 * @see net.sareweb.barazkide.model.RatingModel
 * @generated
 */
@JSON(strict = true)
public class RatingModelImpl extends BaseModelImpl<Rating>
	implements RatingModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a rating model instance should use the {@link net.sareweb.barazkide.model.Rating} interface instead.
	 */
	public static final String TABLE_NAME = "Barazkide_Rating";
	public static final Object[][] TABLE_COLUMNS = {
			{ "ratingId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "rateType", Types.VARCHAR },
			{ "ratedObjectId", Types.BIGINT },
			{ "ratingDate", Types.TIMESTAMP },
			{ "rate", Types.DOUBLE }
		};
	public static final String TABLE_SQL_CREATE = "create table Barazkide_Rating (ratingId LONG not null primary key,userId LONG,rateType VARCHAR(75) null,ratedObjectId LONG,ratingDate DATE null,rate DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table Barazkide_Rating";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.net.sareweb.barazkide.model.Rating"),
			false);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.net.sareweb.barazkide.model.Rating"),
			false);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.net.sareweb.barazkide.model.Rating"),
			true);
	public static long RATEDOBJECTID_COLUMN_BITMASK = 1L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Rating toModel(RatingSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Rating model = new RatingImpl();

		model.setRatingId(soapModel.getRatingId());
		model.setUserId(soapModel.getUserId());
		model.setRateType(soapModel.getRateType());
		model.setRatedObjectId(soapModel.getRatedObjectId());
		model.setRatingDate(soapModel.getRatingDate());
		model.setRate(soapModel.getRate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Rating> toModels(RatingSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Rating> models = new ArrayList<Rating>(soapModels.length);

		for (RatingSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.net.sareweb.barazkide.model.Rating"));

	public RatingModelImpl() {
	}

	public long getPrimaryKey() {
		return _ratingId;
	}

	public void setPrimaryKey(long primaryKey) {
		setRatingId(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Long(_ratingId);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	public Class<?> getModelClass() {
		return Rating.class;
	}

	public String getModelClassName() {
		return Rating.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("ratingId", getRatingId());
		attributes.put("userId", getUserId());
		attributes.put("rateType", getRateType());
		attributes.put("ratedObjectId", getRatedObjectId());
		attributes.put("ratingDate", getRatingDate());
		attributes.put("rate", getRate());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long ratingId = (Long)attributes.get("ratingId");

		if (ratingId != null) {
			setRatingId(ratingId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String rateType = (String)attributes.get("rateType");

		if (rateType != null) {
			setRateType(rateType);
		}

		Long ratedObjectId = (Long)attributes.get("ratedObjectId");

		if (ratedObjectId != null) {
			setRatedObjectId(ratedObjectId);
		}

		Date ratingDate = (Date)attributes.get("ratingDate");

		if (ratingDate != null) {
			setRatingDate(ratingDate);
		}

		Double rate = (Double)attributes.get("rate");

		if (rate != null) {
			setRate(rate);
		}
	}

	@JSON
	public long getRatingId() {
		return _ratingId;
	}

	public void setRatingId(long ratingId) {
		_ratingId = ratingId;
	}

	@JSON
	public long getUserId() {
		return _userId;
	}

	public void setUserId(long userId) {
		_userId = userId;
	}

	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	public String getRateType() {
		if (_rateType == null) {
			return StringPool.BLANK;
		}
		else {
			return _rateType;
		}
	}

	public void setRateType(String rateType) {
		_rateType = rateType;
	}

	@JSON
	public long getRatedObjectId() {
		return _ratedObjectId;
	}

	public void setRatedObjectId(long ratedObjectId) {
		_columnBitmask |= RATEDOBJECTID_COLUMN_BITMASK;

		if (!_setOriginalRatedObjectId) {
			_setOriginalRatedObjectId = true;

			_originalRatedObjectId = _ratedObjectId;
		}

		_ratedObjectId = ratedObjectId;
	}

	public long getOriginalRatedObjectId() {
		return _originalRatedObjectId;
	}

	@JSON
	public Date getRatingDate() {
		return _ratingDate;
	}

	public void setRatingDate(Date ratingDate) {
		_ratingDate = ratingDate;
	}

	@JSON
	public double getRate() {
		return _rate;
	}

	public void setRate(double rate) {
		_rate = rate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			Rating.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Rating toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Rating)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		RatingImpl ratingImpl = new RatingImpl();

		ratingImpl.setRatingId(getRatingId());
		ratingImpl.setUserId(getUserId());
		ratingImpl.setRateType(getRateType());
		ratingImpl.setRatedObjectId(getRatedObjectId());
		ratingImpl.setRatingDate(getRatingDate());
		ratingImpl.setRate(getRate());

		ratingImpl.resetOriginalValues();

		return ratingImpl;
	}

	public int compareTo(Rating rating) {
		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Rating rating = null;

		try {
			rating = (Rating)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		long primaryKey = rating.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		RatingModelImpl ratingModelImpl = this;

		ratingModelImpl._originalRatedObjectId = ratingModelImpl._ratedObjectId;

		ratingModelImpl._setOriginalRatedObjectId = false;

		ratingModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Rating> toCacheModel() {
		RatingCacheModel ratingCacheModel = new RatingCacheModel();

		ratingCacheModel.ratingId = getRatingId();

		ratingCacheModel.userId = getUserId();

		ratingCacheModel.rateType = getRateType();

		String rateType = ratingCacheModel.rateType;

		if ((rateType != null) && (rateType.length() == 0)) {
			ratingCacheModel.rateType = null;
		}

		ratingCacheModel.ratedObjectId = getRatedObjectId();

		Date ratingDate = getRatingDate();

		if (ratingDate != null) {
			ratingCacheModel.ratingDate = ratingDate.getTime();
		}
		else {
			ratingCacheModel.ratingDate = Long.MIN_VALUE;
		}

		ratingCacheModel.rate = getRate();

		return ratingCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(13);

		sb.append("{ratingId=");
		sb.append(getRatingId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", rateType=");
		sb.append(getRateType());
		sb.append(", ratedObjectId=");
		sb.append(getRatedObjectId());
		sb.append(", ratingDate=");
		sb.append(getRatingDate());
		sb.append(", rate=");
		sb.append(getRate());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(22);

		sb.append("<model><model-name>");
		sb.append("net.sareweb.barazkide.model.Rating");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>ratingId</column-name><column-value><![CDATA[");
		sb.append(getRatingId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rateType</column-name><column-value><![CDATA[");
		sb.append(getRateType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratedObjectId</column-name><column-value><![CDATA[");
		sb.append(getRatedObjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ratingDate</column-name><column-value><![CDATA[");
		sb.append(getRatingDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rate</column-name><column-value><![CDATA[");
		sb.append(getRate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Rating.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Rating.class
		};
	private long _ratingId;
	private long _userId;
	private String _userUuid;
	private String _rateType;
	private long _ratedObjectId;
	private long _originalRatedObjectId;
	private boolean _setOriginalRatedObjectId;
	private Date _ratingDate;
	private double _rate;
	private long _columnBitmask;
	private Rating _escapedModelProxy;
}